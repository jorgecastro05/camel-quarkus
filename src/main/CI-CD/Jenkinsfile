pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 60, unit: 'MINUTES')
    }
    agent {
      node {
        label 'maven'
      }
    }

    stages {

        stage('Clone repository from github') {
            steps {
                echo '### Cloning ${APP_GIT_URL} repository ###'
                script {
                // The below will clone your repo and will be checked out to master branch by default.
                git url: "${APP_GIT_URL}"
                // Do a ls -lart to view all the files are cloned. It will be clonned. This is just for you to be sure about it.
                sh "ls -lart ./*"
                // List all branches in your repo.
                }
            }
        }

        stage('Set enviroment variables') {
                steps {
                contentReplace(configs: [variablesReplaceConfig(configs: [variablesReplaceItemConfig(name: 'DB_USER', value: '${DB_USER}'), variablesReplaceItemConfig(name: 'DB_PASSWORD', value: '${DB_PASSWORD}')], emptyValue: '', fileEncoding: 'UTF-8', filePath: 'src/main/jkube/secret.yml', variablesPrefix: '#{', variablesSuffix: '}#')])
                }
        }


        stage('Launch new app in DEV') {
            steps {
                echo '### Running Jkube Plugin ###'
                sh '''
                        ./mvnw clean package oc:build oc:resource oc:apply
                   '''
            }
        }

        stage('Wait for deployment in DEV') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
        }

    }
}